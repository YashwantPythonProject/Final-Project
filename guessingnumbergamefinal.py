# -*- coding: utf-8 -*-
"""GuessingNumberGameFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10dhgITr-wxEd9yKApPBnqadU1eIgWKk_

# Library used to generate the random number
"""

import random

"""# Calculate how close the player is to the actual value"""

def calculate_accuracy(guess, actual_number):
    if guess == 0:
        return 0
    return 100 - (abs(guess - actual_number) / actual_number * 100)

"""We first check whether the guess is zero. This is to avoid a division by  zero error and returns 0% just in case. We then calculate the absolute difference between the guessed and actual number. The results is returned as a percentage of the actual number

# Manage a single round for one player
"""

def guess_the_number(player_name, number_to_guess):
    max_attempts = 5
    best_accuracy = 0

    print(f"\n{player_name}, I'm thinking of a number between 1 and 100. You have {max_attempts} tries.")

    for _ in range(max_attempts):
        try:
            player_guess = int(input(f"{player_name}, enter your guess: "))
            accuracy = calculate_accuracy(player_guess, number_to_guess)

            if accuracy > best_accuracy:
                best_accuracy = accuracy

            if player_guess < number_to_guess:
                print("Too low. Try again.")
            elif player_guess > number_to_guess:
                print("Too high. Try again.")
            elif player_guess == number_to_guess:
                print(f"Congratulations, {player_name}! You guessed the number correctly.")
                return 100  # Max accuracy

        except ValueError:
            print("Please enter a valid integer.")

    print(f"{player_name}, your attempts are over. Your best guess was {best_accuracy:.2f}% close to the number.")
    return best_accuracy

"""We first specify the maximum number of attempts. A for loop is used to give the player a ficed number of opportunities to make a guess. It informs the player whether their guess is too high or too low. If the player somehow guesses the correct number it will announce success and return a 100% success rate. otherwise, the output is given based on the closes number to the actual value

# Main function
"""

def main():
    number_of_players = int(input("Enter the number of players: "))
    players = {}
    number_to_guess = random.randint(1, 100)

    for _ in range(number_of_players):
        player_name = input("Enter player's name: ")
        accuracy = guess_the_number(player_name, number_to_guess)
        players[player_name] = accuracy

    # Ranking players
    ranked_players = sorted(players.items(), key=lambda x: x[1], reverse=True)
    print("\nGame Over! Here's the ranking:")
    for rank, (player, accuracy) in enumerate(ranked_players, start=1):
        print(f"{rank}. {player} with {accuracy:.2f}% closeness")

"""This function asks the number of players and initializes a dictionary to save the player's name and their accuracy. A random number between 1 and 100 is generated. A loop is run where each player takes their turn in the game and the records are recorded. Once all the players have players, they are sorted in decending order based on their predictions and the results are outputted.

#Calling the main function
"""

if __name__ == "__main__":
    main()

